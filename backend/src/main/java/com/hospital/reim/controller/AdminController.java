// src/main/java/com/hospital/reim/controller/AdminController.java
package com.hospital.reim.controller;

import com.hospital.reim.dto.CreateUserRequest;
import com.hospital.reim.entity.User;
import com.hospital.reim.repository.UserRepository;
import com.hospital.reim.service.UserService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/admin")
@RequiredArgsConstructor
public class AdminController {

    private final UserService userService;
    private final UserRepository userRepo;

    /** 新增用户（仅 ADMIN） */
    @PostMapping("/users")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> create(@Valid @RequestBody CreateUserRequest req) {
        var result = userService.createUser(req);
        // ⚠️ 注意：UserService 的 record 是 usingDefault() 不是 autoGenerated()
        return ResponseEntity.ok(Map.of(
                "id", result.id(),
                "tempPassword", result.usingDefault() ? result.plainPassword() : null
        ));
    }

    /** 所有用户列表（仅 ADMIN） */
    @GetMapping("/users")
    @PreAuthorize("hasRole('ADMIN')")
    public List<UserListItem> list() {
        return userRepo.findAll().stream().map(UserListItem::from).toList();
    }

    @PostMapping("/users/{id}/reset-password")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> reset(@PathVariable Long id) {
        String newPwd = userService.resetPasswordToDefault(id);
        return ResponseEntity.ok(Map.of("tempPassword", newPwd));
    }

    /** 列表 DTO（避免把 passwordHash 暴露出去） */
    public record UserListItem(
            Long id,
            String employeeId,
            String name,
            String department,
            boolean mustChangePassword,
            List<String> roles
    ) {
        public static UserListItem from(User u) {
            return new UserListItem(
                    u.getId(),
                    u.getEmployeeId(),
                    u.getName(),
                    u.getDepartment(),
                    u.isMustChangePassword(),
                    u.getRoles().stream().map(Enum::name).toList()
            );
        }
    }
}
